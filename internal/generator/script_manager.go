package generator

import (
	"fmt"
	"go-DBmodeler/pkg/logger"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// ScriptManager 管理JavaScript脚本文件
type ScriptManager struct {
	log       *logger.Logger
	scriptDir string
}

// NewScriptManager 创建一个新的脚本管理器
func NewScriptManager(log *logger.Logger, scriptDir string) *ScriptManager {
	return &ScriptManager{
		log:       log,
		scriptDir: scriptDir,
	}
}

// LoadScriptFromFile 从文件加载JavaScript脚本
func (sm *ScriptManager) LoadScriptFromFile(filename string) (string, error) {
	// 确保文件路径在脚本目录内
	fullPath := filepath.Join(sm.scriptDir, filename)

	// 安全检查：防止目录遍历攻击
	if !strings.HasPrefix(fullPath, sm.scriptDir) {
		return "", fmt.Errorf("无效的脚本文件路径")
	}

	// 读取文件内容
	content, err := ioutil.ReadFile(fullPath)
	if err != nil {
		return "", fmt.Errorf("读取脚本文件失败: %v", err)
	}

	return string(content), nil
}

// ListAvailableScripts 列出所有可用的脚本文件
func (sm *ScriptManager) ListAvailableScripts() ([]string, error) {
	var scripts []string

	// 确保脚本目录存在
	if _, err := os.Stat(sm.scriptDir); os.IsNotExist(err) {
		// 如果目录不存在，创建它
		if err := os.MkdirAll(sm.scriptDir, 0755); err != nil {
			return nil, fmt.Errorf("创建脚本目录失败: %v", err)
		}
		return scripts, nil // 返回空列表
	}

	// 读取目录中的所有.js文件
	files, err := ioutil.ReadDir(sm.scriptDir)
	if err != nil {
		return nil, fmt.Errorf("读取脚本目录失败: %v", err)
	}

	for _, file := range files {
		if !file.IsDir() && strings.HasSuffix(file.Name(), ".js") {
			scripts = append(scripts, file.Name())
		}
	}

	return scripts, nil
}

// SaveScriptToFile 将脚本保存到文件
func (sm *ScriptManager) SaveScriptToFile(filename, content string) error {
	// 确保文件路径在脚本目录内
	fullPath := filepath.Join(sm.scriptDir, filename)

	// 安全检查：防止目录遍历攻击
	if !strings.HasPrefix(fullPath, sm.scriptDir) {
		return fmt.Errorf("无效的脚本文件路径")
	}

	// 确保脚本目录存在
	if err := os.MkdirAll(sm.scriptDir, 0755); err != nil {
		return fmt.Errorf("创建脚本目录失败: %v", err)
	}

	// 写入文件
	if err := ioutil.WriteFile(fullPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("保存脚本文件失败: %v", err)
	}

	return nil
}

// GetScriptDir 获取脚本目录路径
func (sm *ScriptManager) GetScriptDir() string {
	return sm.scriptDir
}

// GetDefaultScripts 获取默认脚本的内容
func (sm *ScriptManager) GetDefaultScripts() map[string]string {
	return map[string]string{
		"camelCase.js": `// Camel case conversion script
function toCamelCase(str) {
    str = String(str);
    return str.replace(/_([a-z])/g, (g) => g[1].toUpperCase())
              .replace(/^[A-Z]/, (g) => g.toLowerCase());
}

// input is already parsed JSON object
let result = "export interface " + input.tableName + " {\n";

// Process each field
for (const field of input.fields) {
    const fieldName = String(field.name || '');
    const camelCaseName = toCamelCase(fieldName);

    if (field.comment) {
        result += "  /** " + field.comment + " */\n";
    }
    result += "  " + camelCaseName + ": " + field.tsType + ";\n";
}

result += "}\n";

// Set output result
output = result;
`,

		"addHeader.js": `// Header comment script
// input is already parsed JSON object

// Generate header comment
const header = ` + "`" + `/**
 * ${input.tableName} model
 * Generated at: ${new Date().toLocaleString()}
 * Table: ${input.tableName}
 * Field count: ${input.fields.length}
 * Do not edit this file manually
 */

` + "`" + `;

// Get current generated code
let result = tsCode;

// If no header comment, add one
if (!result.includes('/**')) {
    result = header + result;
}

// Set output result
output = result;
`,

		"formatCode.js": `// Code formatting script
// input is already parsed JSON object

// Get current generated code
let result = tsCode;

// Format code - add proper indentation and line breaks
result = result
    .replace(/\{\s*\n/g, '{\n  ')
    .replace(/;\s*\n/g, ';\n  ')
    .replace(/\n\s*\}/g, '\n}')
    .replace(/\n\s*\n/g, '\n')
    .trim();

// Ensure there's a newline at the end
if (!result.endsWith('\n')) {
    result += '\n';
}

// Set output result
output = result;
`,

		"addImports.js": `// Type import script
// input is already parsed JSON object

// Get current generated code
let result = tsCode;

// Collect types that need to be imported
const importTypes = new Set();

// Check field types to determine what needs to be imported
for (const field of input.fields) {
    const type = field.tsType.toLowerCase();
    if (type.includes('date') || type.includes('time')) {
        importTypes.add('Date');
    }
}

// If there are types to import, add import statements
if (importTypes.size > 0) {
    let imports = '// Auto-generated import statements\n';
    for (const type of importTypes) {
        imports += ` + "`" + `// import { ${type} } from './types'\n` + "`" + `;
    }
    imports += '\n';
    
    // Add import statements at the beginning of the code
    result = imports + result;
}

// Set output result
output = result;
`,
	}
}

// InitializeDefaultScripts 初始化默认脚本文件
func (sm *ScriptManager) InitializeDefaultScripts() error {
	defaultScripts := sm.GetDefaultScripts()

	// 确保脚本目录存在
	if err := os.MkdirAll(sm.scriptDir, 0755); err != nil {
		return fmt.Errorf("创建脚本目录失败: %v", err)
	}

	// 保存所有默认脚本
	for filename, content := range defaultScripts {
		fullPath := filepath.Join(sm.scriptDir, filename)

		// 如果文件已存在，跳过
		if _, err := os.Stat(fullPath); err == nil {
			continue
		}

		// 写入文件
		if err := ioutil.WriteFile(fullPath, []byte(content), 0644); err != nil {
			sm.log.Warnf("保存默认脚本 %s 失败: %v", filename, err)
		} else {
			sm.log.Infof("已创建默认脚本: %s", filename)
		}
	}

	return nil
}
